Programación I
Final: Trabajo práctico domiciliario

Consignas para la entrega del parcial:

○ En caso de incumplir con el formato del nombre, se restarán automáticamente dos
puntos, pudiendo desaprobar por este error el parcial.
● La entrega será mediante la INTRANET de la Escuela, una carpeta de Drive que figurará junto
al final en la mesa que se haya anotado para rendir el final.

● Los archivos utilizados para el desarrollo deberán estar ordenados bajo una arquitectura de
directorios clara y prolija.

[X]  Además, se deberá adjuntar dentro del archivo comprimido, un archivo llamado alumnxs.txt,
con los siguientes datos personales: Alumn@s, cuatrimestre, comisión, turno, materia y
profesor.

Introducción

Se debe presentar un sistema de compra on-line (carro de compras) que conste de:

[X] Navegación de categorías.
[X] Catálogo de productos.
[X] Agregar y quitar elementos de la compra.
[] Cierre de la compra solicitando datos del pago y del cliente.

El trabajo es individual o grupal de 2 (dos) personas, desarrollando una maqueta HTML
válida, implementando las tecnologías y conceptos dictados en el transcurso de la cursada de
la materia. A tal efecto, se aplicará JavaScript con manejo de DOM y objetos nativos de
ECMAScript.

[] Serán desaprobadas las entregas que carezcan de diseño o que el mismo no se visualice de
manera apropiada en los navegadores de uso común.
[] Debe respetarse una interfaz navegable y comprensible, donde el usuario pueda interpretar
el proceso completo de la compra.
[] Se debe usar una o más hojas de estilo, a elección del/de la alumn@.

------------------------------------

Mínimo para aprobar:

[X] La interacción de todo el proceso de compra (navegar categorías, ver producto,
resumen de compra y checkout) debe programarse en un único documento HTML.
[X] Se deben aplicar las técnicas de manejo de DOM dictadas durante la cursada,
haciendo especial implementación en la creación y eliminación de objetos, alteraciones
de CSS, etc.
[X] Debe poseer un catálogo de productos que pueda filtrarse por categorías.
[X] Los productos deben estar divididos, como mínimo, en tres categorías diferentes y
debe de haber 6 como mínimo.
[X] El listado de productos debe obtenerse de un ARRAY multidimensional o de Objetos
OBJECT.
[] Cada vez que se cambia de categoría debe aparecer una oferta especial que se
destaque durante 10 segundos a modo de banner flotante, luego esta oferta DEBE
DESAPARECER.
○ En el listado de productos, mostrar:
    [X] Nombre.
    [X] Descripción. (Si hacen el detalle del producto, la descripción se puede agregar
    ahí y no necesita aparecer en el listado)
    [X] Precio.
    [X] Una imagen en miniatura.
    [X] Categoría.

[X] Debe haber un área del sitio que muestre (mientras el usuario navega por el sitio) la
cantidad de productos agregados al carrito y el monto total a pagar, que al hacerle clic
debe listar TODOS los productos agregados con el subtotal por cada producto y el
total de la compra.
[X] Los productos deben quitarse, ya sea de uno en uno, así como todos los que se han
comprado.
[] Debe haber un botón que marque el final de la selección de productos y permita
avanzar al proceso de ingreso de datos de envío y pago, comúnmente conocido como
'checkout'.
[] En el checkout se debe solicitar la información del cliente (nombre, teléfono, email,
lugar y fecha de entrega) y del pago (método de pago, cuotas –si corresponde–). Este
proceso debe tener la posibilidad de cancelarse para seguir agregando o eliminando
productos del carro.

------------------------------------

Para sumar nota:

[X] Ver detalles del producto, en una "ampliación" (Debería de mostrar todos los datos del
producto).
[] Si el ampliar la imagen ofrece más de una foto (a modo de galería de fotos), mejor.
[X] Si se selecciona más de una vez, el mismo producto debe aparecer una única vez en el
detalle de la compra, indicando la cantidad de veces que se compró cada producto.
[] Hacer que el banner rote aleatoriamente o sea distinto cada vez que se cambia de
categoría y ofrecer alguna interacción (ver o agregar un producto, ir a una categoría,
etc.).
[] En los datos del cliente, hacer que algunos datos sean obligatorios. La única validación
solicitada es que los datos no estén vacíos. (El atributo “required” no basta, tiene que
haber alguna validación desde JavaScript)
[] Destacar visualmente los campos que no pasen satisfactoriamente la validación.
[] Desarrollar funciones constructoras para los elementos de los cuales se deban crear
instancias.
[X] Detección de teclado para los casos donde pueda implementarse (por ejemplo, cerrar
la ventana modal al usar la tecla escape, o moverse a la imagen anterior/siguiente con
las flechas).
[] El uso de localStorage.
[] Resetear el carrito al finalizar la compra.

------------------------------------

Para restar nota:

○ Ya tengan TODO el HTML armado y se limiten a cambiar el display (block/none) de los
objetos:
[] El final es de DOM, por lo cual la grilla de productos, el detalle de cada
producto, la ampliación del detalle, el detalle del carrito de compras y los
datos del usuario para el cierre de compra, SE DEBEN CREAR recién cuando
sean solicitados.
[] El resto de la interfaz puede crearse desde HTML.
[] Generen los elementos mediante el uso de innerHTML, se deben usar funciones
nativas del manejo de DOM para crear, agregar y eliminar los elementos.
[] Solo se permite el uso de innerHTML para definir el texto interno de las etiquetas
(mientras no contenga código HTML).

------------------------------------

Serán reprobadas automáticamente, sin posibilidad de defensa, las entregas que:

[] Hagan uso de ventanas obstrusivas: alert, prompt y confirm. TODO debe realizarse
desde DOM.
[] Tengan eventos inline desde alguna etiqueta del HTML.
[] Cualquier implementación de Frameworks/librerias que no sea Bootstrap.

------------------------------------

Evaluación

● Se va a evaluar en primera instancia la funcionalidad del programa y su aspecto más técnico,
la codificación.
● El código resultante deberá ser acotado, minimizando el uso de variables y optimizando su
modificación.
● En segunda instancia se tendrá en cuenta el proceso de compra del usuario. Y, por último, el
diseño y navegabilidad de la interfaz.
● La defensa del final es presencial y el docente puede realizar preguntas sobre el desarrollo
del programa, así como pedir que se modifiquen determinadas líneas de código a fin de
evaluar el criterio de programación del alumno/a y su autoría.
● De no poder defender o explicar su entrega, habrá desaprobado la misma.
● El trabajo debe cumplir con TODAS las pautas solicitadas, la ausencia de alguna es motivo
suficiente para considerar la entrega como desaprobada.